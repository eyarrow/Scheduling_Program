package scheduler.model;

import java.text.Normalizer;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

/**
 * A class to manage a singular Appointment object
 */
public class Appointment {
    /**
     * Default Constructor for adding a new Appointment. Contact Name is generated by the constructor
     * @param appointmentID integer, auto-assigned
     * @param title String, title of the appointment
     * @param description String, description
     * @param location String, location
     * @param contactID integer
     * @param type String, appointment type
     * @param start ZonedDateTime, start time
     * @param end ZonedDateTime, end time
     * @param customerID int customer id
     * @param userID int user id
     */
    public Appointment(int appointmentID, String title, String description, String location, int contactID, String type, ZonedDateTime start, ZonedDateTime end, int customerID, int userID) {
        AppointmentID = appointmentID;
        this.title = title;
        this.description = description;
        this.location = location;
        ContactID = contactID;
        this.type = type;
        this.start = start;
        this.end = end;
        CustomerID = customerID;
        UserID = userID;
        this.ContactName = Scheduler.getContactByID(ContactID).getContactName();
        setFormattedStart(start);
        setFormattedEnd(end);

    }

    /**
     * Default construtor with no parameters. This populates null values to an empty appointment object
     * which can be initialized later.
     */
    public Appointment() {
        AppointmentID = 0;
        this.title = "NULL";
        this.description = "NULL";
        this.location = "NULL";
        ContactID = 0;
        this.type = "NULL";
        this.start = ZonedDateTime.now();
        this.end = ZonedDateTime.now();
        CustomerID = 0;
        UserID = 0;
        this.ContactName = "NULL";
        setFormattedStart(start);
        setFormattedEnd(end);
    }



    /**
     * Constructor for modified appointments. Contact name is generated by the constructor
     * @param title String, title of the appointment
     * @param description String, description
     * @param location String, location
     * @param contactID integer
     * @param type String, appointment type
     * @param start ZonedDateTime, start time
     * @param end ZonedDateTime, end time
     * @param customerID int customer id
     * @param userID int user id
     */
    public Appointment(String title, String description, String location, int contactID, String type, ZonedDateTime start, ZonedDateTime end, int customerID, int userID) {
        this.title = title;
        this.description = description;
        this.location = location;
        ContactID = contactID;
        this.type = type;
        this.start = start;
        this.end = end;
        CustomerID = customerID;
        UserID = userID;
        this.ContactName = Scheduler.getContactByID(ContactID).getContactName();
        setFormattedStart(start);
        setFormattedEnd(end);

    }

    /**
     * Returns the Appointment ID for the appointment
     * @return Integer, AppointmentID
     */
    public int getAppointmentID() {
        return AppointmentID;
    }


    /**
     * Sets the appointment ID for the appointment
     * @param appointmentID Integer, AppointmentID
     */
    public void setAppointmentID(int appointmentID) {
        AppointmentID = appointmentID;
    }

    /**
     * Returns the title of an appointment
     * @return String, title.
     */
    public String getTitle() {
        return title;
    }


    /**
     * Set the title of an appointment
     * @param title String, title
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Returns the description of an appointment
     * @return String, description
     */
    public String getDescription() {
        return description;
    }


    /**
     * Sets the description of an appointment
     * @param description String, description
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Returns the location of an appointment
     * @return String, location
     */
    public String getLocation() {
        return location;
    }

    /**
     * Sets the location of an appointment
     * @param location String, location
     */
    public void setLocation(String location) {
        this.location = location;
    }

    /**
     * Returns the ContactID
     * @return Integer, the ContactID
     */
    public int getContactID() {
        return ContactID;
    }

    /**
     * Sets the contact id
     * @param contactID Integer, ContactID
     */
    public void setContactID(int contactID) {
        ContactID = contactID;
    }

    /**
     * Return the appointment type
     * @return String, type
     */
    public String getType() {
        return type;
    }


    /**
     * Set the appointment type
     * @param type String, type
     */
    public void setType(String type) {
        this.type = type;
    }

    /**
     * Return the start date/time.
     * @return LocalDateTime, start date and time
     */
    public ZonedDateTime getStart() {

        return start;
    }


    /**
     * Set the start date/time
     * @param start LocalDateTime, start date and time
     */
    public void setStart(ZonedDateTime start) {
        this.start = start;
    }

    /**
     * Return the end time
     * @return LocalDateTime, endtime
     */
    public ZonedDateTime getEnd() {
        return end;
    }

    /**
     * Set the end time
     * @param end LocalDateTime end
     */
    public void setEnd(ZonedDateTime end) {
        this.end = end;
    }

    /**
     * Return the customer ID
     * @return String, Customer ID
     */
    public int getCustomerID() {
        return CustomerID;
    }

    /**
     * Set the customer ID
     * @param customerID Integer CustomerID
     */
    public void setCustomerID(int customerID) {
        CustomerID = customerID;
    }

    /**
     * Get the User ID
     * @return Integer, User ID
     */
    public int getUserID() {
        return UserID;
    }

    /**
     * Set the UserID
     * @param userID Integer, User ID
     */
    public void setUserID(int userID) {
        UserID = userID;
    }

    /**
     * Get the Contact Name associated with the Contact ID
     * @return String, contact name
     */
    public String getContactName() {
        return ContactName;
    }

    /**
     * Set the Contact Name associated with the Contact Id
     * @param contactName String, contact name associated with Integer ID
     */
    public void setContactName(String contactName) {
        ContactName = contactName;
    }


    /**
     * Creates a String based human readable version of the start time for the UI
     * @param time Zoned Date time
     */
    public void setFormattedStart(ZonedDateTime time) {
        DateTimeFormatter SFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        FormattedStart = SFormat.format(time);
    }

    /**
     * Creates a string based human readlable version of the end time for the UI
     * @param time Zoned Date Time
     */
   public void setFormattedEnd(ZonedDateTime time) {
       DateTimeFormatter SFormat = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
       FormattedEnd = SFormat.format(time);

   }

    /**
     * Return a formatted string for displaying start time
     * @return String
     */
   public String getFormattedStart() {
       return FormattedStart;
   }


    /**
     * Return a formatted string for displaying end time
     * @return String
     */
   public String getFormattedEnd() {
       return FormattedEnd;
   }

//Class Data Members
    private int AppointmentID;
    private String title;
    private String description;
    private String location;
    private int ContactID;
    private String type;
    private ZonedDateTime start;
    private ZonedDateTime end;
    private int CustomerID;
    private int UserID;
    private String ContactName;
    private String FormattedStart;
    private String FormattedEnd;







}
